# Generated by Django 5.0 on 2024-01-08 13:22

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Day',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Monday', 'Monday'), ('Tuesday', 'Tuesday'), ('Wednesday', 'Wednesday'), ('Thursday', 'Thursday'), ('Friday', 'Friday'), ('Saturday', 'Saturday'), ('Sunday', 'Sunday')], max_length=10, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Hours',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('07:00', '07:00'), ('08:00', '08:00'), ('09:00', '09:00'), ('10:00', '10:00'), ('11:00', '11:00'), ('12:00', '12:00'), ('13:00', '13:00'), ('14:00', '14:00'), ('15:00', '15:00'), ('16:00', '16:00'), ('17:00', '17:00'), ('18:00', '18:00'), ('19:00', '19:00'), ('20:00', '20:00'), ('21:00', '21:00'), ('22:00', '22:00')], max_length=10, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='SubjectCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tutor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=150, unique=True)),
                ('phone_number', models.CharField(max_length=15, null=True, unique=True)),
                ('gender', models.CharField(default=django.utils.timezone.now, max_length=50, null=True)),
                ('date_of_birth', models.DateField(null=True)),
                ('institution', models.CharField(max_length=150, null=True)),
                ('institution_type', models.CharField(choices=[('--select one--', '--select one--'), ('University', 'University'), ('Polytechnic', 'Polytechnic'), ('College Of Education', 'College Of Education'), ('Vocational', 'Vocational'), ('Others', 'Others')], default='--select one--', max_length=20, null=True)),
                ('result', models.CharField(blank=True, choices=[('--select one--', '--select one--'), ('First Class', 'First Class'), ('Distinction', 'Distinction'), ('Second Class Upper', 'Second Class Upper'), ('Upper credit', 'Upper credit'), ('Second Class Lower', 'Second Class Lower'), ('Lower credit', 'Lower credit'), ('Others', 'Others')], default='--select one--', max_length=20, null=True)),
                ('quiz_result', models.FloatField(default=0.0, null=True)),
                ('quiz_count', models.IntegerField(default=0, null=True)),
                ('highest_qualification', models.CharField(choices=[('--select one--', '--select one--'), ('Phd', 'Phd'), ('Msc', 'Msc'), ('BED', 'BED'), ('BSC', 'BSC'), ('BENG', 'BENG'), ('HND', 'HND'), ('OND', 'OND'), ('NCE', 'NCE'), ('SSCE', 'SSCE'), ('Others', 'Others')], default='--select one--', max_length=50, null=True)),
                ('area_of_specialization', models.CharField(max_length=100, null=True)),
                ('discipline', models.CharField(max_length=100, null=True)),
                ('primary_subject', models.CharField(max_length=100)),
                ('employment_type', models.CharField(choices=[('--select one--', '--select one--'), ('Full Time', 'Full Time'), ('Part Time', 'Part Time'), ('Freelance', 'Freelance'), ('Others', 'Others')], max_length=50, null=True)),
                ('employment_status', models.CharField(choices=[('', '--select one--'), ('Employed', 'Employed'), ('Self Employed', 'Self Employed'), ('Unemployed', 'Unemployed')], default='--select one--', max_length=50, null=True)),
                ('lga_resident', models.CharField(max_length=50, null=True)),
                ('state_of_residence', models.CharField(max_length=50, null=True)),
                ('state_of_origin', models.CharField(max_length=50, null=True)),
                ('nationality', models.CharField(max_length=50, null=True)),
                ('bio', models.TextField(max_length=1000, null=True)),
                ('status', models.CharField(max_length=50, null=True)),
                ('availability', models.CharField(choices=[('', '--select one--'), ('Remote', 'Remote'), ('In-Person', 'In-Person'), ('Hybrid', 'Hybrid')], max_length=50, null=True)),
                ('average_session_duration', models.CharField(max_length=150, null=True)),
                ('open_to_work', models.CharField(choices=[('', '--select one--'), ('Open', 'Open'), ('Not open to work', 'Not open to work'), ('Engaged', 'Engaged')], max_length=50, null=True)),
                ('is_suspended', models.BooleanField(default=False)),
                ('is_blocked', models.BooleanField(default=False)),
                ('cv_id', models.FileField(blank=True, null=True, upload_to='cv_files/')),
                ('highest_qualification_cert', models.FileField(blank=True, null=True, upload_to='certs/highest_qualification/')),
                ('profile_picture', models.ImageField(default='default_user_icon.png', upload_to='profile_picture/')),
                ('residential_address', models.CharField(max_length=255, null=True)),
                ('reviews_id', models.IntegerField(null=True, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('others', models.CharField(max_length=100, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('average_class_duration', models.IntegerField(default=0, null=True)),
                ('price_per_hour', models.IntegerField(default=0, null=True)),
                ('negotiable', models.BooleanField(default=True, null=True)),
                ('active_contract_count', models.IntegerField(default=0, null=True)),
                ('settled_contract_count', models.IntegerField(default=0, null=True)),
                ('declined_contract_count', models.IntegerField(default=0, null=True)),
                ('pending_contract_count', models.IntegerField(default=0, null=True)),
                ('received_payment', models.IntegerField(default=0, null=True)),
                ('total_contract_count', models.IntegerField(default=0, null=True)),
                ('total_payment', models.IntegerField(default=0, null=True)),
                ('cart_count', models.IntegerField(default=0, null=True)),
                ('rank', models.FloatField(default=1.0, null=True)),
                ('total_ratings', models.IntegerField(default=0)),
                ('accumulated_rating', models.IntegerField(default=0)),
                ('is_suspended_admin', models.BooleanField(default=False)),
                ('is_blocked_admin', models.BooleanField(default=False)),
                ('suspended_at_admin', models.DateTimeField(blank=True, null=True)),
                ('blocked_at_admin', models.DateTimeField(blank=True, null=True)),
                ('suspension_duration_admin', models.IntegerField(default=0, null=True)),
                ('suspension_reason_admin', models.TextField(blank=True, null=True)),
                ('block_reason_admin', models.TextField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, related_name='tutor_groups', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='tutor_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_name', models.CharField(max_length=100)),
                ('proficiency', models.CharField(max_length=100, null=True)),
                ('teaching_experience', models.CharField(max_length=100, null=True)),
                ('tutor_count', models.IntegerField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='tutor.subjectcategory')),
                ('tutors', models.ManyToManyField(related_name='subjects', to='tutor.tutor')),
            ],
        ),
        migrations.CreateModel(
            name='ProCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pro_course_name', models.CharField(max_length=100)),
                ('tutor_count', models.IntegerField(null=True)),
                ('related_pro_courses', models.TextField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('tutors', models.ManyToManyField(related_name='pro_courses', to='tutor.tutor')),
            ],
        ),
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('certificate_name', models.CharField(max_length=255)),
                ('issuing_authority', models.CharField(max_length=255, null=True)),
                ('date_of_issuance', models.DateField(null=True)),
                ('certificate_file', models.FileField(upload_to='certs/other_certificate_files/')),
                ('tutor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certificates', to='tutor.tutor')),
            ],
        ),
        migrations.CreateModel(
            name='TimeSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tutor.day')),
                ('from_hour', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_hour', to='tutor.hours')),
                ('to_hour', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_hour', to='tutor.hours')),
                ('tutor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='tutor.tutor')),
            ],
            options={
                'ordering': ['day__created_at', 'from_hour__created_at'],
                'unique_together': {('tutor', 'day', 'from_hour', 'to_hour')},
            },
        ),
    ]
